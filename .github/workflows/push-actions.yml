name: Build

on: push

env:
  SKIP: ${{ vars.SKIP }}

jobs:
  default:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          . install_poetry.sh
          poetry install
      - name: Pre-commit
        run: |
          poetry run pre-commit run -a
      - name: Run tests
        run: |
          poetry run pytest
  production-deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: default
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Configure Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"
      - name: Deploy to PyPi
        run: |
          . install_poetry.sh
          poetry publish --build -u ${{ secrets.PYPI_USERNAME}} -p ${{ secrets.PYPI_PASSWORD }}
      - name: Git tag
        run: |
          export VERSION=$(poetry version -s)
          git tag -a $VERSION -m "$VERSION release"
          git push origin --tags
  staging-deploy:
    runs-on: ubuntu-latest
    environment: staging
    needs: default
    if: startsWith(github.ref, 'refs/heads/release')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Configure Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"
      - name: Deploy to PyPi
        run: |
          . install_poetry.sh
          poetry version prerelease
          poetry publish --build -u ${{ secrets.PYPI_USERNAME}} -p ${{ secrets.PYPI_PASSWORD }}
          git commit -a -m "Prerelease bumped version [skip ci]"
          git push
